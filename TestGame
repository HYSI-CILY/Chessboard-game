package org.zhrgf.test;

import java.util.Iterator;
import java.util.Random;
import javafx.application.Application;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.scene.Group;
import javafx.scene.Node;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.ButtonBar;
import javafx.scene.layout.AnchorPane;
import javafx.scene.layout.Border;
import javafx.scene.layout.BorderStroke;
import javafx.scene.layout.BorderStrokeStyle;
import javafx.scene.layout.BorderWidths;
import javafx.scene.layout.CornerRadii;
import javafx.scene.paint.Color;
import javafx.stage.Stage;


public class TestGame extends Application{
	
	
	@Override
	public void start (Stage stage) throws Exception {
		Group hbox = new Group();
		
		//Question
		ButtonBar question = new ButtonBar();
		Question q = new Question();
		
		for(int k=0;k<5;k++) {
			q.click(new Random().nextInt(7), new Random().nextInt(7));
		}
		for(int i=0;i<8;i++) {
			for(int j=0;j<8;j++) {
			MyButton x = new MyButton();
			x.setPrefHeight(50);
			x.setPrefWidth(50);
			x.setLayoutX(950+50*i);
			x.setLayoutY(50*j);
			x.setBorder(new Border(new BorderStroke(Color.BLACK,BorderStrokeStyle.SOLID,new CornerRadii(0),new BorderWidths(2))));
			Coordinate search = new Coordinate((x.getLayoutX()-950)/50,x.getLayoutY()/50);
			for(Coordinate candidate:q.getList()) {
				if(candidate.equals(search)) {
					if(candidate.getColor()) {
						x.setStyle("-fx-background-color: white");
						x.count=true;
					}else {
						x.setStyle("-fx-background-color:black");
						x.count=false;
					}
				}
			}
			question.getButtons().addAll(x);
			hbox.getChildren().add(x);
			}
		}
				
		
		ButtonBar bb = new ButtonBar(); 
		for(int i=0;i<8;i++) {
			for(int j=0;j<8;j++) {
			MyButton x = new MyButton();
			x.setId("x"+i+"y"+j);
			x.setPrefHeight(100);
			x.setPrefWidth(100);
			x.setLayoutX(100*i);
			x.setLayoutY(100*j);
			x.setStyle("-fx-background-color: white");
			x.setBorder(new Border(new BorderStroke(Color.BLACK,BorderStrokeStyle.SOLID,new CornerRadii(0),new BorderWidths(2))));
			hbox.getChildren().add(x);
			bb.getButtons().addAll(x);
			
			x.setOnAction(new EventHandler<ActionEvent>() {
			@Override
			public void handle(ActionEvent event) {
				x.pressed();
				x.setColor();
				Iterator<Node> it = bb.getButtons().iterator();
				while(it.hasNext()) {
					MyButton voisin = (MyButton)it.next();
					if (((voisin.getLayoutX()==x.getLayoutX()-100)&&(voisin.getLayoutY()==x.getLayoutY())) || ((voisin.getLayoutX()==x.getLayoutX())&&(voisin.getLayoutY()==x.getLayoutY()+100)) || ((voisin.getLayoutY()==x.getLayoutY()-100)&&(voisin.getLayoutX()==x.getLayoutX())) || ((voisin.getLayoutY()==x.getLayoutY())&&(voisin.getLayoutX()==x.getLayoutX()+100)) ) {
						voisin.pressed();
						voisin.setColor();
						}
					}
			}
			});
			}
		}
		
		Button check = new Button();
		check.setLayoutX(950.00);
		check.setLayoutY(500.00);
		check.setPrefSize(150, 70);
		check.setText("submit the answer");
		hbox.getChildren().add(check);
		check.setOnAction(new EventHandler<ActionEvent>(){
			@Override
			public void handle (ActionEvent event) {
				int count=0;
				Iterator<Node> y1 = bb.getButtons().iterator();
				while(y1.hasNext()) {
					MyButton x1 = (MyButton)y1.next();
					Coordinate c1=new Coordinate (x1.getLayoutX(),x1.getLayoutY());
					Iterator<Node> y2 = question.getButtons().iterator();
					while(y2.hasNext()) {
					MyButton x2 = (MyButton)y2.next();
					Coordinate c2 = new Coordinate(2*(x2.getLayoutX()-950),2*x2.getLayoutY());
					if((c1.equals(c2))&&(x1.getColorName().equals(x2.getColorName()))) {
						count++;
					}
					}
				}
				
				if(count==64) {
					Iterator <Node> y3 = bb.getButtons().iterator();
					while(y3.hasNext()) {
						MyButton x3 = (MyButton)y3.next();
						x3.setStyle("-fx-background-color: white");
						x3.count=true;
					}
				}
			}
		});
		
		Button refresh = new Button();
		refresh.setLayoutX(1200);
		refresh.setLayoutY(500);
		refresh.setPrefSize(150, 70);
		refresh.setText("change a question");
		hbox.getChildren().add(refresh);
		refresh.setOnAction(new EventHandler<ActionEvent>(){
			@Override
			public void handle (ActionEvent event) {
				Iterator<Node> it = question.getButtons().iterator();
				Question q1 = new Question();
				for(int k=0;k<5;k++) {
					q1.click(new Random().nextInt(7), new Random().nextInt(7));
				}
				while(it.hasNext()) {
					MyButton toto = (MyButton)it.next();
					Coordinate dodo = new Coordinate((toto.getLayoutX()-950)/50,toto.getLayoutY()/50);
					for(Coordinate candidate:q1.getList()) {
						if(candidate.equals(dodo)) {
							if(candidate.getColor()) {
								toto.setStyle("-fx-background-color: white");
								toto.count=true;
							}else {
								toto.setStyle("-fx-background-color:black");
								toto.count=false;
							}
						}
					}
				}
			}		
		});
		
		Button set = new Button ();
		set.setLayoutX(1200);
		set.setLayoutY(600);
		set.setPrefSize(150, 70);
		set.setText("reset");
		hbox.getChildren().add(set);
		set.setOnAction(new EventHandler<ActionEvent>(){
			@Override
			public void handle (ActionEvent event) {
				Iterator<Node> it = bb.getButtons().iterator();
				while(it.hasNext()) {
					MyButton x = (MyButton)it.next();
					x.setStyle("-fx-background-color: white");
					x.count=true;
				}
			}		
		});
		

		AnchorPane root = new AnchorPane();
		root.getChildren().addAll(hbox);
		AnchorPane.setTopAnchor(hbox, 100.00);
		AnchorPane.setLeftAnchor(hbox, 50.00);
		
		Scene scene =new Scene(root);
        stage.setScene(scene);
		stage.setTitle("Chessboard");
		stage.setHeight(1000);
		stage.setWidth(800);
		stage.show();
		
	}
	
	public static void main (String[] args) {
		launch(args);
	}
}
